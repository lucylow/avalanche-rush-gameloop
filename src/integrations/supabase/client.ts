// Mock Supabase client for development when package is not installed
// This file is automatically generated. Do not edit it directly.

// Mock types for development
type Database = any;

const SUPABASE_URL = "https://wruwznirhqbihdnulwdp.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndydXd6bmlyaHFiaWhkbnVsd2RwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg5MTIxMzUsImV4cCI6MjA3NDQ4ODEzNX0.CLlLdrvO0vNYGQK0jKv19Xqfdig7wkXexJuOwDq5K3g";

// Mock Supabase client
export const supabase = {
  auth: {
    signInWithPassword: async (credentials: any) => ({
      data: { user: null, session: null },
      error: { message: 'Supabase not available in development' }
    }),
    signUp: async (credentials: any) => ({
      data: { user: null, session: null },
      error: { message: 'Supabase not available in development' }
    }),
    signOut: async () => ({
      error: null
    }),
    getSession: async () => ({
      data: { session: null },
      error: null
    }),
    onAuthStateChange: (callback: any) => {
      // Mock auth state change
      return { data: { subscription: { unsubscribe: () => {} } } };
    }
  },
  from: (table: string) => ({
    select: () => ({
      eq: () => ({
        single: async () => ({ data: null, error: { message: 'Supabase not available' } }),
        limit: () => ({
          order: () => async () => ({ data: [], error: { message: 'Supabase not available' } })
        })
      }),
      insert: async () => ({ data: null, error: { message: 'Supabase not available' } }),
      update: () => ({
        eq: () => async () => ({ data: null, error: { message: 'Supabase not available' } })
      }),
      delete: () => ({
        eq: () => async () => ({ data: null, error: { message: 'Supabase not available' } })
      })
    })
  })
};